{"name": "test_calculator", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=141.0.7390.66); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7469de9e5+80021]\n\tGetHandleVerifier [0x0x7ff7469dea40+80112]\n\t(No symbol) [0x0x7ff74676060f]\n\t(No symbol) [0x0x7ff74674c145]\n\t(No symbol) [0x0x7ff74677177a]\n\t(No symbol) [0x0x7ff7467e8b06]\n\t(No symbol) [0x0x7ff746808fa2]\n\t(No symbol) [0x0x7ff7467e1003]\n\t(No symbol) [0x0x7ff7467a95d1]\n\t(No symbol) [0x0x7ff7467aa3f3]\n\tGetHandleVerifier [0x0x7ff746c9dd8d+2960445]\n\tGetHandleVerifier [0x0x7ff746c9804a+2936570]\n\tGetHandleVerifier [0x0x7ff746cb8a87+3070263]\n\tGetHandleVerifier [0x0x7ff7469f84ce+185214]\n\tGetHandleVerifier [0x0x7ff7469fff1f+216527]\n\tGetHandleVerifier [0x0x7ff7469e7c24+117460]\n\tGetHandleVerifier [0x0x7ff7469e7ddf+117903]\n\tGetHandleVerifier [0x0x7ff7469cdcb8+11112]\n\tBaseThreadInitThunk [0x0x7ffc98287374+20]\n\tRtlUserThreadStart [0x0x7ffc9951cc91+33]", "trace": "def test_calculator():\n        \"\"\"\n        Автотест для калькулятора с задержкой\n        \"\"\"\n        # Настройка Chrome WebDriver\n        chrome_options = Options()\n        # Максимальное окно браузера\n        chrome_options.add_argument(\"--start-maximized\")\n    \n        # Инициализация драйвера\n        driver = webdriver.Chrome(options=chrome_options)\n    \n        # Шаг 1: Открыть страницу калькулятора\n        print(\"Шаг 1: Открываю страницу калькулятора...\")\n        driver.get(\n                    \"https://bonigarcia.dev/selenium\"\n                    \"-webdriver-java/slow-calculator.html\"\n            )\n    \n        # Шаг 2: Ввести значение 45 в поле задержки\n        print(\"Шаг 2: Ввожу значение 45 в поле задержки...\")\n        delay_input = driver.find_element(By.CSS_SELECTOR, \"#delay\")\n        delay_input.clear()\n        delay_input.send_keys(\"10\")\n    \n        # Шаг 3: Нажать на кнопки 7, +, 8, =\n        print(\"Шаг 3: Выполняю вычисление 7 + 8 = ...\")\n    \n        # Нажимаем кнопку 7\n        button_7 = driver.find_element(By.XPATH, \"//span[text()='7']\")\n        button_7.click()\n    \n        # Нажимаем кнопку +\n        button_plus = driver.find_element(By.XPATH, \"//span[text()='+']\")\n        button_plus.click()\n    \n        # Нажимаем кнопку 8\n        button_8 = driver.find_element(By.XPATH, \"//span[text()='8']\")\n        button_8.click()\n    \n        # Нажимаем кнопку =\n        button_equals = driver.find_element(By.XPATH, \"//span[text()='=']\")\n        button_equals.click()\n    \n        # Шаг 4: Проверить результат 15 через 45 секунд\n        print(\"Шаг 4: Ожидаю результат 15...\")\n        # Засекаем время начала операции\n        start_time = time.time()\n    \n        # Ждем появления результата с таймаутом 50 секунд (чуть больше 45)\n        wait = WebDriverWait(driver, 50)\n>       wait.until(\n            EC.invisibility_of_element_located((By.ID, \"spinner\"))\n        )\n\nlesson6K\\test_02_calc.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python314\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python314\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:556: in _predicate\n    target = driver.find_element(*target)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python314\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python314\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002494570F9B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff7469cdcb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffc98287374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffc9951cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=141.0.7390.66); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7469de9e5+80021]\nE       \tGetHandleVerifier [0x0x7ff7469dea40+80112]\nE       \t(No symbol) [0x0x7ff74676060f]\nE       \t(No symbol) [0x0x7ff74674c145]\nE       \t(No symbol) [0x0x7ff74677177a]\nE       \t(No symbol) [0x0x7ff7467e8b06]\nE       \t(No symbol) [0x0x7ff746808fa2]\nE       \t(No symbol) [0x0x7ff7467e1003]\nE       \t(No symbol) [0x0x7ff7467a95d1]\nE       \t(No symbol) [0x0x7ff7467aa3f3]\nE       \tGetHandleVerifier [0x0x7ff746c9dd8d+2960445]\nE       \tGetHandleVerifier [0x0x7ff746c9804a+2936570]\nE       \tGetHandleVerifier [0x0x7ff746cb8a87+3070263]\nE       \tGetHandleVerifier [0x0x7ff7469f84ce+185214]\nE       \tGetHandleVerifier [0x0x7ff7469fff1f+216527]\nE       \tGetHandleVerifier [0x0x7ff7469e7c24+117460]\nE       \tGetHandleVerifier [0x0x7ff7469e7ddf+117903]\nE       \tGetHandleVerifier [0x0x7ff7469cdcb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffc98287374+20]\nE       \tRtlUserThreadStart [0x0x7ffc9951cc91+33]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python314\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "\nАвтотест для калькулятора с задержкой\n", "attachments": [{"name": "stdout", "source": "0867204f-f853-4b59-b536-8819c19555bf-attachment.txt", "type": "text/plain"}], "start": 1760490567778, "stop": 1760490572445, "uuid": "c5e198ad-783d-4555-924a-500888a4e526", "historyId": "c80b2f078702d192748b21d220fec896", "testCaseId": "c80b2f078702d192748b21d220fec896", "fullName": "lesson6K.test_02_calc#test_calculator", "labels": [{"name": "parentSuite", "value": "lesson6K"}, {"name": "suite", "value": "test_02_calc"}, {"name": "host", "value": "DESKTOP-26H1N68"}, {"name": "thread", "value": "22912-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "lesson6K.test_02_calc"}], "titlePath": ["lesson6K", "test_02_calc.py"]}